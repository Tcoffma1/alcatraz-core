buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'idea'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'

/**
 * Version in dev is set to 'dev'
 * Any builds produced by the github actions build script will have a version matching their tag.
 * All version numbers should be Semantic Versioning 2.0 compliant
 */
if (System.getenv('VERSION') != null) {
    version = System.getenv('VERSION')
} else {
    version = 'dev'
}
group = 'com.alcatrazescapee.core' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "alcatrazcore-forge-${mc_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20200408-1.15.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Run configurations
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                alcatrazcore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                alcatrazcore {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

// Puts the mod version into the jar for mods.toml to read from
jar {
    manifest {
        attributes([
                "Specification-Title": "alcatrazcore",
                "Specification-Vendor": "AlcatrazEscapee",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"AlcatrazEscapee",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

curseforge {
    def envApiKey = System.getenv('CURSEFORGE_API_KEY')
    if (envApiKey == null) {
        println 'Unable to locate CURSEFORGE_API_KEY in env variable'
        return
    }
    def versionReleaseType = "release"
    if (version.toString().contains("beta")) {
        versionReleaseType = "beta"
    } else if (version.toString().contains("alpha")) {
        versionReleaseType = "alpha"
    }
    project {
        apiKey = envApiKey
        id = '304493'
        changelog = "[Release Notes ${version}](https://github.com/alcatrazEscapee/ore-veins/releases/tag/v${version})"
        changelogType = "markdown"
        releaseType = versionReleaseType
        addGameVersion "${mc_version}"
    }
}

jar.finalizedBy('reobfJar')

publishing {
    def githubUser = System.getenv("GITHUB_ACTOR")
    if (githubUser == null) {
        println 'Unable to locate GITHUB_ACTOR env variable'
        return
    }

    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/alcatrazEscapee/alcatraz-core"
            credentials {
                username System.getenv("GITHUB_ACTOR")
                password System.getenv("GITHUB_TOKEN")
            }
        }
    }
}